version: "3"

services:
  nginx:    
    build: ./nginx/  
    container_name: nginx-container
    restart: always
    ports:  
      - ${HOST_PORT}:80  
    links:  
      - app  
    volumes_from:  
      - app
    depends_on:
      - app

  app:    
    build:
      context: ./php/
      args:
        user: ${HOST_USER} # your username (echo $USER)
        uid: ${HOST_UID} # your uid (id -u)
        php_version: ${PHP_VERSION}
    image: app:latest
    container_name: app-container
    environment:
      APP_ENV: ${APP_ENV}
      CONTAINER_ROLE: app
    restart: always
    working_dir: /var/www/html/
    extra_hosts:
      - host.docker.internal:host-gateway
    volumes:  
      - ${WORK_DIR}:/var/www/html/
    depends_on:
      - mysql

  scheduler:    
    image: app:latest
    container_name: scheduler-container
    environment:
      APP_ENV: ${APP_ENV}
      CONTAINER_ROLE: scheduler
    restart: always
    command: "/usr/local/bin/start.sh"
    working_dir: /var/www/html/
    volumes_from:  
      - app
    depends_on:
      - app
    profiles:
      - donotstart
  
  queue:    
    image: app:latest
    container_name: queue-container
    environment:
      APP_ENV: ${APP_ENV}
      CONTAINER_ROLE: queue
    restart: always
    command: "/usr/local/bin/start.sh"
    working_dir: /var/www/html/
    volumes_from:  
      - app
    depends_on:
      - app

  composer:    
    image: app:latest
    container_name: composer-container
    environment:
      APP_ENV: ${APP_ENV}
      CONTAINER_ROLE: composer
    # restart: always
    command: "/usr/local/bin/start.sh"
    working_dir: /var/www/html/
    volumes_from:  
      - app
    depends_on:
      - app

  node:    
    image: node:${NODE_VERSION}
    container_name: node-container
    restart: always
    command: >
      sh -c "echo fs.inotify.max_user_instances=524288 && sysctl -p && 
             npm install &&
             npm run watch -s
             "
    working_dir: /var/www/html
    volumes:  
      - ${WORK_DIR}:/var/www/html/

  mysql:    
    image: mysql:${MYSQL_VERSION}  
    container_name: mysql-container
    restart: always
    volumes:
      - volume_mysql:/var/lib/mysql
      - ${SQL_DUMP_FILE}:/docker-entrypoint-initdb.d/dump.sql
    ports:
      - ${MYSQL_PORT}:3306
    environment:  
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE_NAME}  
      MYSQL_USER: ${MYSQL_USER}  
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
  
  #################################################################
  # Run following as root on host machine in order to run SonarQube
  #
  # sudo sysctl -w vm.max_map_count=524288
  # sudo sysctl -w fs.file-max=131072
  # ulimit -n 131072
  # ulimit -u 8192
  #################################################################
  sonarqube:
    image: sonarqube:community
    container_name: sonarqube-container
    mem_limit: 2G
    mem_reservation: 2G
    depends_on:
      - sonarqube_db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://sonarqube_db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "${SONAR_PORT}:9000"
    profiles:
      - donotstart

  sonarqube_db:
    image: postgres:12
    container_name: sonarqube-db-container
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    profiles:
      - donotstart

  sonar_scanner:
    image: sonarsource/sonar-scanner-cli
    container_name: sonar-scanner-container
    volumes:  
      - ${WORK_DIR}:/usr/src
    command: >
      sh -c "
      sonar-scanner \
      -Dsonar.exclusions='${SONAR_EXCLUSIONS}' \
      -Dsonar.login=${SONAR_LOGIN} \ 
      -Dsonar.password=${SONAR_PASSWORD} \ 
      -Dsonar.projectBaseDir=/usr/src \
      -Dsonar.host.url='http://sonarqube:9000' \
      -Dsonar.scm.provider=git \
      -Dsonar.sources=. \
      -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
      -Dsonar.projectName=${SONAR_PROJECT_NAME} \
      "
    depends_on:
      - sonarqube
    profiles:
      - donotstart

  mailhog: # https://aregsar.com/blog/2020/laravel-app-with-mail-server-in-docker/
    image: mailhog/mailhog:latest
    container_name: mailhog-container
    environment:
      - MH_STORAGE=maildir
      - MH_MAILDIR_PATH="/maildir"
    restart: always
    volumes:
      - volume_mailhog:/maildir
    ports:
      - "8003:1025"
      - ${MAILHOG_PORT}:8025 # http://127.0.0.1:8100/

  ngrok:
    image: shkoliar/ngrok:latest
    container_name: ngrok-container
    restart: always
    ports:
      - ${NGROK_PORT}:4551 # http://127.0.0.1:4551
    links:
      - nginx
    environment:
      - DOMAIN=nginx
      - PORT=80
      - AUTH_TOKEN=${NGROK_AUTH_TOKEN}

volumes:
  volume_mailhog:
  volume_mysql:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data: